name: Version Bump

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - rc
          - beta
          - alpha

permissions:
  contents: write
  pull-requests: write

jobs:
  create-bump-pr:
    name: Create Version Bump PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Hatch
        uses: pypa/hatch@install

      - name: Get Current Version
        id: current_version
        run: |
          CURRENT_VERSION=$(hatch version)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release Branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release/v${{ steps.current_version.outputs.CURRENT_VERSION }}

      - name: Bump Version
        id: bump_version
        run: |
          hatch version ${{ inputs.bump_type }}
          NEW_VERSION=$(hatch version)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          git add .
          git commit -m "üîñ Bump version v${{ steps.current_version.outputs.CURRENT_VERSION }} ‚Üí v${{ steps.bump_version.outputs.NEW_VERSION }}"
          git push origin release/v${{ steps.current_version.outputs.CURRENT_VERSION }}

      - name: Generate Changelog
        id: changelog
        run: |
          # Get the last version tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Get repository URL
          REPO_URL="https://github.com/${GITHUB_REPOSITORY}"

          # Create a temporary file for raw changelog
          {
            echo "# üîñ New Release: v${{ steps.bump_version.outputs.NEW_VERSION }}"
            echo "Previous version: v${{ steps.current_version.outputs.CURRENT_VERSION }}"
            echo
            echo "## üìù Summary"
            echo
            echo "<if this is here i was lazy>"
            echo
            echo "## üìù What's new?"
            echo

            if [ -z "$LAST_TAG" ]; then
              # If no tags exist, get all commits
              git log --pretty=format:"- [%s]($REPO_URL/commit/%H)" --no-merges
            else
              # Get commits since last tag
              git log --pretty=format:"- [%s]($REPO_URL/commit/%H)" --no-merges ${LAST_TAG}..HEAD
            fi

            echo
            echo "---"
          } > changelog.md

          # Read the file and escape the content for GitHub Actions
          CHANGELOG=$(cat changelog.md)
          echo "CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: release/v${{ steps.current_version.outputs.CURRENT_VERSION }}
          title: "üîñ Release v${{ steps.bump_version.outputs.NEW_VERSION }}"
          body: ${{ steps.changelog.outputs.CONTENT }}
          labels: |
            release
            automated pr
          commit-message: "üîñ Bump version v${{ steps.current_version.outputs.CURRENT_VERSION }} ‚Üí v${{ steps.bump_version.outputs.NEW_VERSION }}"
          delete-branch: true
